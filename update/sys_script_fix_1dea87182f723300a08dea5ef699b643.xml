<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_fix">
    <sys_script_fix action="INSERT_OR_UPDATE">
        <active>true</active>
        <before>false</before>
        <description>Gets a list of vCenter Data Centers</description>
        <flush_cache>false</flush_cache>
        <name>vCenter DataCenters from API</name>
        <record_for_rollback>false</record_for_rollback>
        <run_once>true</run_once>
        <script><![CDATA[ try {
   
	var endpoint = 'Matei vCenter';	
	var cred = new GlideRecord('x_374824_vcenter_i_vcenter_endpoints');		
	cred.get('name', endpoint);
	
	var ipaddress = cred.ip_address;
	var sessionid = cred.session_id;
	
	
	 
	 
 var r = new sn_ws.RESTMessageV2('x_374824_vcenter_i.vCenter DataCenters', 'GET');
 r.setStringParameterNoEscape('sessionid', sessionid);
 r.setStringParameterNoEscape('ipaddress', ipaddress);

//override authentication profile 
//authentication type ='basic'/ 'oauth2'
//r.setAuthentication(authentication type, profile name);

//set a MID server name if one wants to run the message on MID
//r.setMIDServer('MY_MID_SERVER');

//if the message is configured to communicate through ECC queue, either
//by setting a MID server or calling executeAsync, one needs to set skip_sensor
//to true. Otherwise, one may get an intermittent error that the response body is null
//r.setEccParameter('skip_sensor', true);

 var response = r.execute();
 var responseBody = response.getBody();
 var httpStatus = response.getStatusCode();



gs.info(httpStatus);
// var parsed = JSON.parse(responseBody);
// var values = parsed.values;

/*
for (var i =0; i < values.length; i++ ){
	gs.addInfoMessage(values[i]);	
	
	
}
*/
//if(response.getStatusCode() == "200")
//{

var jasonString = responseBody;
//var parser = new JSONParser();
var parsed = global.JSON.parse(jasonString);
	 
	 
for (var i in parsed.value)
	{
		//var name = parsed.value[i].name;
		//var datacenter = parsed.value[i].datacenter;
		
		
		var rec = new GlideRecord('x_374824_vcenter_i_data_store_transform');
		  
			rec.initialize();
		
			rec.name = parsed.value[i].name;
			rec.datacenter = parsed.value[i].datacenter;
			
		//gr.u_name = cmdb[i]['name'];
		//gr.u_other_attributes_etc=cmdb[i]['description'];
		
			rec.insert();
		
		
		
	}
	 
 
//} 
	 
gs.addInfoMessage('Parsed JSON: ' + parsed);

// gs.addInfoMessage(responseBody);
// gs.addInfoMessage(httpStatus);
	 
}
catch(ex) {
 var message = ex.message;
}]]></script>
        <sys_class_name>sys_script_fix</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-18 17:10:46</sys_created_on>
        <sys_id>1dea87182f723300a08dea5ef699b643</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>vCenter DataCenters from API</sys_name>
        <sys_package display_value="vCenter Integration" source="x_374824_vcenter_i">5c2978222f623300a08dea5ef699b680</sys_package>
        <sys_policy/>
        <sys_scope display_value="vCenter Integration">5c2978222f623300a08dea5ef699b680</sys_scope>
        <sys_update_name>sys_script_fix_1dea87182f723300a08dea5ef699b643</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-22 14:52:59</sys_updated_on>
        <unloadable>false</unloadable>
    </sys_script_fix>
</record_update>
