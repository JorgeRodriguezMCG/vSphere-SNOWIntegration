<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>Get VMs: Matei Vcenter</name>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2019-07-19 22:08:47</run_start>
        <run_time>1970-01-01 20:00:00</run_time>
        <run_type>daily</run_type>
        <script><![CDATA[ try {
	var endpoint = 'Matei vCenter';
	var cred = new GlideRecord('x_374824_vcenter_i_vcenter_endpoints');		
	cred.get('name', endpoint);
	
	var ipaddress = cred.ip_address;
	var sessionid = cred.session_id;
			
	 
	 
 var r = new sn_ws.RESTMessageV2('x_374824_vcenter_i.vCenter VMs', 'GET');
 r.setStringParameterNoEscape('sessionid', sessionid);
 r.setStringParameterNoEscape('ipaddress', ipaddress);

//override authentication profile 
//authentication type ='basic'/ 'oauth2'
//r.setAuthentication(authentication type, profile name);

//set a MID server name if one wants to run the message on MID
//r.setMIDServer('MY_MID_SERVER');

//if the message is configured to communicate through ECC queue, either
//by setting a MID server or calling executeAsync, one needs to set skip_sensor
//to true. Otherwise, one may get an intermittent error that the response body is null
//r.setEccParameter('skip_sensor', true);

 var response = r.execute();
 var responseBody = response.getBody();
 var httpStatus = response.getStatusCode();

// var parsed = JSON.parse(responseBody);
// var values = parsed.values;

/*
for (var i =0; i < values.length; i++ ){
	gs.addInfoMessage(values[i]);	
	
	
}
*/
//if(response.getStatusCode() == "200")
//{
var parsed = global.JSON.parse(responseBody);
	 
	 
for (var i in parsed.value)
	{
		var memsize = parsed.value[i].memory_size_MiB;
		var vm = parsed.value[i].vm;
		var name = parsed.value[i].name;
		var power = parsed.value[i].power_state;
		var cpu = parsed.value[i].cpu_count;
		
		var rec = new GlideRecord('x_374824_vcenter_i_virtual_machines_tran');
			rec.initialize();
		
			rec.memory_size_mib = memsize;
			rec.vm = vm;
			rec.name = name;
			rec.power_state = power;
			rec.cpu_count = cpu;
			
			
			rec.insert();
		
		
		
	}
	 
 
//} 
	 
gs.addInfoMessage(parsed);

// gs.addInfoMessage(responseBody);
// gs.addInfoMessage(httpStatus);
	 
}
catch(ex) {
 var message = ex.message;
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-19 22:10:09</sys_created_on>
        <sys_id>de0a95702f363300a08dea5ef699b602</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Get VMs: Matei Vcenter</sys_name>
        <sys_package display_value="vCenter Integration" source="x_374824_vcenter_i">5c2978222f623300a08dea5ef699b680</sys_package>
        <sys_policy/>
        <sys_scope display_value="vCenter Integration">5c2978222f623300a08dea5ef699b680</sys_scope>
        <sys_update_name>sysauto_script_de0a95702f363300a08dea5ef699b602</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-19 22:10:09</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
